import 'dart:convert'; // For jsonEncode
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb; // For kIsWeb (to check if running on web)
import 'package:firebase_core/firebase_core.dart'; // Core Firebase services
import 'package:firebase_messaging/firebase_messaging.dart'; // For push notifications
import 'package:sk_connect/firebase_options.dart'; // Essential Firebase configuration
import 'package:sk_connect/homepage.dart'; // Your HomePage widget
import 'package:sk_connect/login_page.dart'; // Your LoginPage widget
import 'package:sk_connect/auth_helper.dart'; // Contains PushNotifications class. Make sure this path is correct.
import 'package:sk_connect/inbox.dart';
import 'package:sk_connect/services/notification_service.dart'; // Assuming your InboxPage is defined in 'inbox.dart'

// A global key for navigating from outside the widget tree (e.g., from notification handlers).
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

/// --- Firebase Background Message Handler ---
/// This function must be a top-level function (not inside a class).
/// It's called when a notification is received while the app is in the background or terminated.
@pragma('vm:entry-point') // Required for background message handling on Android
Future<void> _firebaseBackgroundMessage(RemoteMessage message) async {
  // Ensure Firebase is initialized for background processing.
  // This is crucial if the app is terminated when the message arrives.
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Check if a user is currently logged in before processing background notifications.
  // This is the core of ensuring no notifications for logged-out users.
  if (PushNotifications.isUserLoggedIn()) { // Assuming you add this helper method
    if (message.notification != null) {
      print("Background notification received: ${message.notification!.title}");
      // Optionally, you might still want to display a local notification here
      // even if the app is terminated, but only if the user is logged in.
      // PushNotifications.showSimpleNotification(
      //   title: message.notification!.title!,
      //   body: message.notification!.body!,
      //   payload: jsonEncode(message.data),
      // );
    }
  } else {
    print("Background notification received but user is logged out. Ignoring.");
  }
}

/// --- Function to show foreground notification on Web platform ---
/// This provides a simple pop-up for web notifications, as local_notifications doesn't support web.
void showNotification({required String title, required String body}) {
  // Use a Future.microtask to ensure the dialog is shown after the current build cycle completes.
  // This helps prevent issues if the notification arrives during a build.
  Future.microtask(() {
    if (navigatorKey.currentContext != null) {
      showDialog(
        context: navigatorKey.currentContext!, // Use the global navigator key
        builder: (context) => AlertDialog(
          title: Text(title),
          content: Text(body),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context); // Close the dialog
              },
              child: const Text("Ok"),
            )
          ],
        ),
      );
    } else {
      print("Error: navigatorKey.currentContext is null, cannot show web notification dialog.");
    }
  });
}

/// --- Main Application Entry Point ---
void main() async {
  // Ensure Flutter widgets are initialized before any Firebase calls.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase using the platform-specific options generated by FlutterFire.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize Firebase Messaging for push notifications.
  await PushNotifications.init();

  // Initialize local notifications (only for non-web platforms).
  if (!kIsWeb) {
    await PushNotifications.localNotiInit();
  }

  /// --- Firebase Messaging Listeners ---

  // Listen to background notifications: This listener is for messages received
  // when the app is in the background or terminated.
  FirebaseMessaging.onBackgroundMessage(_firebaseBackgroundMessage);

  // Handle notification when app is opened from a terminated state.
  final RemoteMessage? initialMessage = await FirebaseMessaging.instance.getInitialMessage();
  if (initialMessage != null) {
    print("App launched from terminated state due to notification. Title: ${initialMessage.notification?.title}");
    // Only navigate if a user is logged in
    if (PushNotifications.isUserLoggedIn()) { // Assuming you add this helper method
      Future.delayed(const Duration(seconds: 1), () {
        if (navigatorKey.currentState != null) {
          navigatorKey.currentState!.pushNamed("/inbox", arguments: initialMessage);
        }
      });
    } else {
      print("App launched from terminated state, but user is logged out. Not navigating to inbox.");
    }
  }

  // Handle notifications when app is in the background and tapped (onMessageOpenedApp).
  // This fires when a user taps on a notification that arrived while the app was in the background.
  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
    print("Background notification tapped. Title: ${message.notification?.title}");
    // Only navigate if a user is logged in
    if (PushNotifications.isUserLoggedIn()) { // Assuming you add this helper method
      if (message.notification != null) {
        if (navigatorKey.currentState != null) {
          navigatorKey.currentState!.pushNamed("/inbox", arguments: message);
        }
      }
    } else {
      print("Background notification tapped, but user is logged out. Not navigating to inbox.");
    }
  });

  // Handle foreground notifications (onMessage).
  // This fires when a notification arrives while the app is actively open and in the foreground.
  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    // Check if a user is logged in before displaying foreground notifications.
    if (PushNotifications.isUserLoggedIn()) { // Assuming you add this helper method
      // Convert notification data to JSON string for local notification payload.
      Map<String, dynamic> combinedData = Map<String, dynamic>.from(message.data);
      if (message.notification != null) {
        combinedData['title'] = message.notification!.title;
        combinedData['body'] = message.notification!.body;
      }
      String payloadData = jsonEncode(combinedData);

      print("Foreground notification received. Title: ${message.notification?.title}");
      if (message.notification != null) {
        if (kIsWeb) {
          showNotification(
            title: message.notification!.title!,
            body: message.notification!.body!,
          );
        } else {
          PushNotifications.showSimpleNotification(
            title: message.notification!.title!,
            body: message.notification!.body!,
            payload: payloadData,
          );
        }
      }
    } else {
      print("Foreground notification received, but user is logged out. Not displaying.");
    }
  });

  // Run your main Flutter application.
  runApp(const MyApp());
}

/// --- MyApp Widget ---
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false, // Hides the debug banner in debug mode
      title: 'SK Connect', // App title
      navigatorKey: navigatorKey, // Assign the global key to MaterialApp for navigation control
      theme: ThemeData(
        // Define your app's overall visual theme.
        colorScheme: ColorScheme.fromSwatch(
          primarySwatch: const MaterialColor(
            0xFF0A2463, // Your primary color (a shade of dark blue)
            <int, Color>{
              50: Color(0xFFE3E7EF), 100: Color(0xFFB9C4DA), 200: Color(0xFF8CA0C3),
              300: Color(0xFF5E7CAB), 400: Color(0xFF3C629A), 500: Color(0xFF0A2463),
              600: Color(0xFF091F59), 700: Color(0xFF07194D), 800: Color(0xFF051341),
              900: Color(0xFF030A2C),
            },
          ),
          backgroundColor: Colors.white, // Default background color for the color scheme
        ),
        useMaterial3: true, // Enable Material 3 design features for a modern look
      ),
      home: LoginPage(), // Set LoginPage as the initial screen users see.
      // Define your app's routes for named navigation.
      routes: {
        // All notification taps (Firebase or local) will now navigate to InboxPage.
        '/inbox': (context) {
          final RemoteMessage? message = ModalRoute.of(context)?.settings.arguments as RemoteMessage?;
          // Pass the message to InboxPage so it can display notification details.
          return InboxPage(message: message);
        },
        // You might still have a homepage route if your app uses it for other navigation
        '/home': (context) => const HomePage(),
        // Keep /message if other parts of your app explicitly navigate to it,
        // but for notifications, we are now using /inbox.
        // If /message was intended *only* for notifications, you can remove this.
        '/message': (context) => const HomePage(),
        // Add other routes as needed for your application.
      },
    );
  }
}