import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:sk_connect/item_class.dart';
import 'package:sk_connect/borrow_request_class.dart';
import 'package:sk_connect/database_helper.dart'; // Assuming this is where addBorrowRequest is defined
import 'package:sk_connect/utils.dart'; // Assuming curClient is defined here
import 'package:sk_connect/borrow_form_sheet.dart';

// Define constants for item statuses to ensure consistency
const String ITEM_STATUS_APPROVED = 'approved';
const String ITEM_STATUS_PENDING = 'pending';
const String ITEM_STATUS_AVAILABLE = 'available';

class ViewItemPage extends StatefulWidget {
  final Item item;
  final Color primaryColor;
  final Color accentColor;
  final Color cardGradientStart;
  final Color cardGradientEnd;

  const ViewItemPage({
    Key? key,
    required this.item,
    required this.primaryColor,
    required this.accentColor,
    required this.cardGradientStart,
    required this.cardGradientEnd,
  }) : super(key: key);

  @override
  _ViewItemPageState createState() => _ViewItemPageState();
}

class _ViewItemPageState extends State<ViewItemPage> {
  late Map<String, String> _controlNumberImages;
  late Map<String, String> _controlNumberBrands;

  @override
  void initState() {
    super.initState();
    _controlNumberImages = Map.from(widget.item.controlNumberImages);
    _controlNumberBrands = Map.from(widget.item.controlNumberBrands);
  }

  void _showBorrowFormSheet(List<String> controlNumbers) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (_) => BorrowFormSheet(
        accentColor: widget.accentColor,
        controlNumbers: controlNumbers,
        // *** CRITICAL FIX HERE: Pass the controlNumberImages map ***
        controlNumberImages: widget.item.controlNumberImages,
        maxAvailable: widget.item.available,
        onSubmit: (selected, purpose, returnDateTime) async {
          final qty = selected.length;
          final ctrlStr = selected.join(',');
          final request = BorrowRequest(
            key: '', // Key will be generated by the database
            itemKey: widget.item.key,
            requesterUid: curClient.uid, // Assuming curClient is globally accessible
            quantity: qty,
            status: 'Pending',
            purpose: purpose,
            timestamp: DateTime.now(),
            returnDate: returnDateTime,
            controlNumber: ctrlStr,
            controlNumbers: selected.toList(),
          );
          await addBorrowRequest(request); // Call to database helper
          if (mounted) {
            Navigator.of(context).pop();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Borrow request submitted')),
            );
          }
        },
      ),
    );
  }

  Widget _buildControlNumberItem(String controlNumber, String itemStatus) {
    final String? imageBase64 = _controlNumberImages[controlNumber];
    final String? brandTitle = _controlNumberBrands[controlNumber];
    final bool hasSpecificImage = imageBase64 != null && imageBase64.isNotEmpty;

    final bool isItemNotAvailable = itemStatus.toLowerCase() == ITEM_STATUS_APPROVED ||
                                    itemStatus.toLowerCase() == ITEM_STATUS_PENDING;

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: hasSpecificImage
                ? Image.memory(
                    base64Decode(imageBase64!),
                    width: 60,
                    height: 60,
                    fit: BoxFit.cover,
                  )
                : widget.item.image.isNotEmpty
                    ? Image.memory(
                        base64Decode(widget.item.image),
                        width: 60,
                        height: 60,
                        fit: BoxFit.cover,
                      )
                    : Container(
                        width: 60,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.grey.shade200,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Icon(Icons.broken_image, size: 30, color: Colors.grey.shade500),
                      ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  controlNumber,
                  style: const TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                if (brandTitle != null && brandTitle.isNotEmpty)
                  Padding(
                    padding: const EdgeInsets.only(top: 2.0),
                    child: Text(
                      'Brand: $brandTitle',
                      style: TextStyle(
                        fontSize: 13,
                        color: Colors.blueGrey.shade700,
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                  ),
                if (isItemNotAvailable)
                  Padding(
                    padding: const EdgeInsets.only(top: 2.0),
                    child: Text(
                      'Not Available',
                      style: TextStyle(
                        fontSize: 13,
                        fontWeight: FontWeight.bold,
                        color: Colors.red.shade700,
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatusCard() {
    String displayText;
    Color displayColor;

    if (widget.item.status.toLowerCase() == ITEM_STATUS_APPROVED) {
      displayText = 'Not Available';
      displayColor = Colors.red.shade700;
    } else if (widget.item.status.toLowerCase() == ITEM_STATUS_PENDING) {
      displayText = 'Pending';
      displayColor = Colors.orange.shade700;
    } else {
      displayText = widget.item.status.isNotEmpty ? widget.item.status : ITEM_STATUS_AVAILABLE;
      displayColor = Colors.green.shade700;
    }

    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Item Status:',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
            ),
            Text(
              displayText,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: displayColor,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatsCard() => Card(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        elevation: 3,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _StatBox(label: 'Total', value: widget.item.totalQuantity.toString(), color: Colors.grey.shade800),
              _StatBox(label: 'Borrowed', value: widget.item.borrowed.toString(), color: Colors.orange.shade700),
              _StatBox(label: 'Available', value: widget.item.available.toString(), color: widget.item.available > 0 ? Colors.green.shade700 : Colors.red.shade400),
            ],
          ),
        ),
      );

  Widget _buildDetailsCard() => Card(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        elevation: 2,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
          child: Text(
            widget.item.details.isNotEmpty ? widget.item.details : 'Walang karagdagang detalye.',
            style: TextStyle(fontSize: 14, color: Colors.grey.shade700),
          ),
        ),
      );

  Widget _buildControlNumbersCard(List<String> controlNumbers) => Card(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        elevation: 2,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Control Numbers:',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              controlNumbers.isEmpty
                  ? Center(child: Text('Walang control numbers na naka-assign.', style: TextStyle(color: Colors.grey.shade600)))
                  : ListView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      itemCount: controlNumbers.length,
                      itemBuilder: (ctx, i) => _buildControlNumberItem(controlNumbers[i], widget.item.status),
                    ),
            ],
          ),
        ),
      );

  @override
  Widget build(BuildContext context) {
    final controlNumbers = widget.item.controlNumbers;

    final bool canBorrow = widget.item.isAvailable &&
        widget.item.status.toLowerCase() != ITEM_STATUS_APPROVED &&
        widget.item.status.toLowerCase() != ITEM_STATUS_PENDING;

    return Scaffold(
      floatingActionButton: canBorrow
          ? FloatingActionButton(
              onPressed: () => _showBorrowFormSheet(controlNumbers),
              backgroundColor: widget.accentColor,
              child: const Icon(Icons.inventory_2_outlined),
            )
          : null,
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
            backgroundColor: widget.primaryColor,
            expandedHeight: 280,
            pinned: true,
            iconTheme: const IconThemeData(color: Colors.white),
            flexibleSpace: FlexibleSpaceBar(
              title: Text(
                widget.item.name,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                  shadows: [Shadow(color: Colors.black38, blurRadius: 6, offset: Offset(0, 2))],
                ),
                overflow: TextOverflow.ellipsis,
              ),
              background: Stack(
                fit: StackFit.expand,
                children: [
                  widget.item.image.isNotEmpty
                      ? Image.memory(base64Decode(widget.item.image), fit: BoxFit.cover)
                      : Container(color: widget.cardGradientStart),
                  const DecoratedBox(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [Colors.transparent, Colors.black54],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          SliverPadding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            sliver: SliverList(
              delegate: SliverChildListDelegate([
                _buildStatsCard(),
                const SizedBox(height: 16),
                _buildStatusCard(),
                const SizedBox(height: 16),
                _buildDetailsCard(),
                const SizedBox(height: 16),
                _buildControlNumbersCard(controlNumbers),
                const SizedBox(height: 80), // Added padding at the bottom for FAB
              ]),
            ),
          ),
        ],
      ),
    );
  }
}

class _StatBox extends StatelessWidget {
  final String label;
  final String value;
  final Color color;

  const _StatBox({
    Key? key,
    required this.label,
    required this.value,
    required this.color,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(
          value,
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: color,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: const TextStyle(fontSize: 12, color: Colors.black87),
        ),
      ],
    );
  }
}